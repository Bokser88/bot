import os
import asyncio
import sqlite3
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import aiohttp

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("7765104602:AAHrOaSMB7gq5Msk2YHduEYJ-ayEfNXnxTQ")
if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")

HH_API_URL = "https://api.hh.ru/vacancies"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
DB_PATH = "users.db"

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            role TEXT,
            experience TEXT,
            salary INTEGER,
            work_format TEXT,
            city TEXT,
            skills TEXT
        )
    """)
    conn.commit()
    conn.close()

def save_user(user_id, **kwargs):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cols = ", ".join(kwargs.keys())
    placeholders = ", ".join(["?" for _ in kwargs])
    values = list(kwargs.values())
    cur.execute(f"INSERT OR REPLACE INTO users (user_id, {cols}) VALUES (?, {placeholders})", [user_id] + values)
    conn.commit()
    conn.close()

def get_user(user_id):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    conn.close()
    if row:
        return {
            "user_id": row[0], "role": row[1], "experience": row[2], "salary": row[3],
            "work_format": row[4], "city": row[5], "skills": row[6]
        }
    return None

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def get_area_id(city: str):
    if not city:
        return 113  # –†–æ—Å—Å–∏—è
    c = city.lower()
    if "–º–æ—Å–∫–≤" in c:
        return 1
    elif "–ø–µ—Ç–µ—Ä–±—É—Ä–≥" in c or "—Å–ø–±" in c:
        return 2
    elif "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥" in c:
        return 3
    elif "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫" in c:
        return 4
    elif "–∫–∞–∑–∞–Ω—å" in c:
        return 88
    elif "—É–¥–∞–ª" in c or "remote" in c or "—Ä—Ñ" in c or "—Ä–æ—Å—Å–∏—è" in c:
        return 113
    return 113

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
def main_menu():
    kb = ReplyKeyboardBuilder()
    kb.button(text="üíº –í–∞–∫–∞–Ω—Å–∏–∏")
    kb.button(text="üéØ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç")
    kb.button(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    kb.button(text="üó£Ô∏è –°–∏–º—É–ª—è—Ç–æ—Ä —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è")
    return kb.as_markup(resize_keyboard=True)

role_list = ["Frontend", "Backend", "QA", "–ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä", "–ê–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö", "DevOps", "–î–∏–∑–∞–π–Ω–µ—Ä", "–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥", "–î—Ä—É–≥–æ–µ"]
exp_list = ["Junior", "Middle", "Senior"]
format_list = ["–û—Ñ–∏—Å", "–£–¥–∞–ª—ë–Ω–∫–∞", "–ì–∏–±—Ä–∏–¥"]

# === –û–°–ù–û–í–ù–´–ï –•–ï–ù–î–õ–ï–†–´ ===
@dp.message(Command("start"))
async def start(message: types.Message):
    user = get_user(message.from_user.id)
    if user and user["role"]:
        await message.answer(
            "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –Ø ‚Äî –≤–∞—à –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n"
            "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?",
            reply_markup=main_menu()
        )
    else:
        await message.answer(
            "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *¬´–ö–∞—Ä—å–µ—Ä–∞ –Ω–∞ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–µ¬ª*!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
            "‚Ä¢ –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n"
            "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º\n"
            "‚Ä¢ –°–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø–ª–∞–Ω\n\n"
            "–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å ‚Äî —ç—Ç–æ –∑–∞–π–º—ë—Ç 2 –º–∏–Ω—É—Ç—ã.",
            parse_mode="Markdown"
        )
        await ask_role(message)

async def ask_role(message: types.Message):
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=r)] for r in role_list], resize_keyboard=True)
    await message.answer("–ö–∞–∫–∞—è —É –≤–∞—Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å?", reply_markup=kb)

@dp.message(lambda m: m.text in role_list)
async def process_role(message: types.Message):
    save_user(message.from_user.id, role=message.text)
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=e)] for e in exp_list], resize_keyboard=True)
    await message.answer("–í–∞—à —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞?", reply_markup=kb)

@dp.message(lambda m: m.text in exp_list)
async def process_exp(message: types.Message):
    save_user(message.from_user.id, experience=message.text)
    await message.answer("–ö–∞–∫–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (—É–∫–∞–∂–∏—Ç–µ —Ü–∏—Ñ—Ä—É –≤ —Ä—É–±–ª—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 120000)", reply_markup=types.ReplyKeyboardRemove())

@dp.message(lambda m: m.text.isdigit())
async def process_salary(message: types.Message):
    save_user(message.from_user.id, salary=int(message.text))
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=f)] for f in format_list], resize_keyboard=True)
    await message.answer("–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã?", reply_markup=kb)

@dp.message(lambda m: m.text in format_list)
async def process_format(message: types.Message):
    save_user(message.from_user.id, work_format=message.text)
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∏—â–µ—Ç–µ —Ä–∞–±–æ—Ç—É? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –£–¥–∞–ª—ë–Ω–∫–∞, –†–æ—Å—Å–∏—è)")

@dp.message(lambda m: m.text and m.text not in role_list + exp_list + format_list and not m.text.isdigit())
async def process_city_and_skills(message: types.Message):
    user = get_user(message.from_user.id)
    if not user or not user.get("work_format"):
        # –≠—Ç–æ –≥–æ—Ä–æ–¥
        save_user(message.from_user.id, city=message.text)
        await message.answer("–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python, SQL, Docker, Agile)")
    else:
        # –≠—Ç–æ –Ω–∞–≤—ã–∫–∏
        save_user(message.from_user.id, skills=message.text)
        await message.answer(
            "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø–æ–¥–±–æ—Ä–∫—É –≤–∞–∫–∞–Ω—Å–∏–π\n"
            "‚Ä¢ –ü—Ä–æ—Ö–æ–¥–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π\n"
            "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
            reply_markup=main_menu()
        )

# === –í–ê–ö–ê–ù–°–ò–ò ===
async def fetch_vacancies_from_hh(user):
    text = user.get("role", "")
    area = get_area_id(user.get("city", ""))
    salary = user.get("salary")
    work_format = user.get("work_format", "")

    params = {
        "text": text,
        "area": area,
        "per_page": 3,
        "page": 0
    }
    if salary:
        params["salary"] = salary
        params["only_with_salary"] = True
    if "—É–¥–∞–ª" in work_format.lower():
        params["schedule"] = "remote"

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(HH_API_URL, params=params) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return data.get("items", [])[:3]
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ hh.ru: {e}")
    return []

@dp.message(lambda m: m.text == "üíº –í–∞–∫–∞–Ω—Å–∏–∏")
async def show_vacancies(message: types.Message):
    user = get_user(message.from_user.id)
    if not user or not user.get("role"):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    vacancies = await fetch_vacancies_from_hh(user)
    if not vacancies:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.")
        return

    for v in vacancies:
        name = v['name']
        url = v['alternate_url']
        employer = v['employer']['name']
        area = v.get('area', {}).get('name', '‚Äî')
        salary_info = "üí∞ –ù–µ —É–∫–∞–∑–∞–Ω–∞"
        if v.get('salary'):
            s_from = v['salary'].get('from') or ''
            s_to = v['salary'].get('to') or ''
            currency = v['salary'].get('currency', 'RUB')
            salary_str = f"{s_from}‚Äì{s_to} {currency}".replace("‚Äì", "‚Äî") if s_from or s_to else "–ü–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏"
            salary_info = f"üí∞ {salary_str}"

        text = f"üîπ [{name}]({url})\n" \
               f"üè¢ {employer}\n" \
               f"{salary_info}\n" \
               f"üìç {area}"
        await message.answer(text, parse_mode="Markdown", disable_web_page_preview=True)

# === –ß–ï–ö-–õ–ò–°–¢ ===
@dp.message(lambda m: m.text == "üéØ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç")
async def send_checklist(message: types.Message):
    await message.answer(
        "üìå *–í–∞—à –∫–∞—Ä—å–µ—Ä–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n"
        "‚úÖ –û—Ç–∫–ª–∏–∫–Ω–∏—Ç–µ—Å—å –Ω–∞ 1 –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é\n"
        "‚úÖ –û–±–Ω–æ–≤–∏—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´–ù–∞–≤—ã–∫–∏¬ª –≤ —Ä–µ–∑—é–º–µ\n"
        "‚úÖ –ü—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫—É—Ä—Å: [–ö–∞–∫ –≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –æ –∑–∞—Ä–ø–ª–∞—Ç–µ](https://example.com)\n\n"
        "–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –ø—É–Ω–∫—Ç—É ‚Äî –∏ –∫–∞—Ä—å–µ—Ä–∞ –ø–æ–π–¥—ë—Ç –≤–≤–µ—Ä—Ö! üí™",
        parse_mode="Markdown"
    )

# === –ü–†–û–§–ò–õ–¨ ===
@dp.message(lambda m: m.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    user = get_user(message.from_user.id)
    if not user or not user.get("role"):
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    exp_emoji = {"Junior": "üå±", "Middle": "üåø", "Senior": "üå≥"}.get(user["experience"], "")
    format_emoji = {"–û—Ñ–∏—Å": "üè¢", "–£–¥–∞–ª—ë–Ω–∫–∞": "üè†", "–ì–∏–±—Ä–∏–¥": "üîÑ"}.get(user["work_format"], "")

    text = (
        f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n"
        f"–†–æ–ª—å: {user['role']}\n"
        f"–û–ø—ã—Ç: {exp_emoji} {user['experience']}\n"
        f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {user['salary']} ‚ÇΩ\n"
        f"–§–æ—Ä–º–∞—Ç: {format_emoji} {user['work_format']}\n"
        f"–ì–æ—Ä–æ–¥: {user['city']}\n"
        f"–ù–∞–≤—ã–∫–∏: {user['skills'] or '‚Äî'}\n\n"
        "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –∑–∞–Ω–æ–≤–æ."
    )
    await message.answer(text, parse_mode="Markdown")

# === –°–û–ë–ï–°–ï–î–û–í–ê–ù–ò–ï ===
@dp.message(lambda m: m.text == "üó£Ô∏è –°–∏–º—É–ª—è—Ç–æ—Ä —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è")
async def interview_sim(message: types.Message):
    await message.answer(
        "üß† *–í–æ–ø—Ä–æ—Å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏:*\n\n"
        "¬´–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∏ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –æ–ø—ã—Ç–µ.¬ª\n\n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º ‚Äî —è –¥–∞–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é.",
        parse_mode="Markdown"
    )

# === –ó–ê–ü–£–°–ö ===
async def main():
    init_db()
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
